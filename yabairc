#!/usr/bin/env zsh
#YABAI STUFF
# bsp or float (default: bsp)
#yabai -m config layout bsp

yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
sudo yabai --load-sa

# My custom space names for my 3 monitor setup. These names are used in some of my scripts.
yabai -m space 1 --label one
yabai -m space 2 --label two
yabai -m space 3 --label three
yabai -m space 4 --label four
yabai -m space 5 --label five
yabai -m space 6 --label six
yabai -m space 9 --label nine

# to fix issue with floating applications always on top
yabai -m rule --add app=".*" layer=normal
# float system preferences. Most of these just diable Yabai form resizing them.
yabai -m rule --add app="^Activity Monitor$" manage=off
yabai -m rule --add app="^DaisyDisk$" manage=off
yabai -m rule --add app="^Disk Utility$" manage=off
yabai -m rule --add app="^Downie$" manage=off
yabai -m rule --add app="^Finder$" manage=off
yabai -m rule --add app="^HandBrake$" manage=off
yabai -m rule --add app="^Karabiner-Elements$" manage=off
yabai -m rule --add app="^Karabiner-EventViewer$" manage=off
yabai -m rule --add app="^KeePassXC$" manage=off
yabai -m rule --add app="^Reminders$" manage=off
yabai -m rule --add app="^Spark$" manage=off
yabai -m rule --add app="^Spotify$" manage=off
yabai -m rule --add app="^System Information$" manage=off
yabai -m rule --add app="^System Preferences$" manage=off
yabai -m rule --add app="^System Settings$" manage=off
yabai -m rule --add app="^Time Out$" manage=off
yabai -m rule --add app="^Transmission$"  manage=off
yabai -m rule --add app="^balenaEtcher$" manage=off
yabai -m rule --add app="^deemix-pyweb$" manage=off
yabai -m rule --add app="^mpv$" manage=off
yabai -m rule --add app="^MusicBrainz Picard$" manage=off
yabai -m rule --add app="AnyConnect" manage=off
# yabai -m rule --add app="^Telegram$" manage=on
yabai -m rule --add app="^Live$" title="^Preferences$" manage=off
yabai -m rule --add app="^Live$" title="^Export Audio/Video$" manage=off

#find ~/Library/Parallels/Applications\ Menus/ -maxdepth 3 -type f | awk -F'/' '{ print $NF; }' | awk '{$1=$1};1' | sort | uniq | tr "\n" "\0" | xargs -0 -I{} yabai -m rule --add app="^{}\$" title=".*" manage=on

## Some random global settings
#yabai -m config focus_follows_mouse          autoraise
#yabai -m config focus_follows_mouse          on
# New window spawns to the right if vertical split, or bottom if horizontal split
#yabai -m config window_placement second_child
#yabai -m config window_topmost off
#yabai -m config window_shadow float
#yabai -m config window_opacity off
#yabai -m config window_opacity_duration 0.00
#yabai -m config active_window_opacity 1.0
#yabai -m config normal_window_opacity        0.97
#yabai -m config window_border                on | off

## WITH SIP ENABLED (Installed Limelight seperately, Don't need this)
yabai -m config window_border off

## WTIH SIP DISABLED (Limelight build into Yabai, enable it here)
#yabai -m config window_border on
#yabai -m config window_border_width 3
#yabai -m config active_window_border_color 0xFF40FF00
#yabai -m config normal_window_border_color 0x00FFFFFF
#yabai -m config insert_feedback_color        0xffd75f5f

## some other settings
yabai -m config auto_balance off
yabai -m config split_ratio 0.50
# # set mouse interaction modifier key (default: fn)
yabai -m config mouse_modifier ctrl
# set modifier + right-click drag to resize window (default: resize)
yabai -m config mouse_action2 resize
# set modifier + left-click drag to resize window (default: move)
yabai -m config mouse_action1 move

# general space settings
#yabai -m config focused_border_skip_floating  1
#yabai -m config --space 3 layout             float

## Change how yabai looks
yabai -m config layout bsp
yabai -m config top_padding 2
yabai -m config bottom_padding 2
yabai -m config left_padding 2
yabai -m config right_padding 2
yabai -m config window_gap 2

# #Ubersicht widget bar stuff
#yabai -m signal --add event=space_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-primary-jsx\"'"
#yabai -m signal --add event=display_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-primary-jsx\"'"

#yabai -m signal --add event=space_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-secondary-jsx\"'"
#yabai -m signal --add event=display_changed \
#action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"nibar-spaces-secondary-jsx\"'"

# signals
# yabai -m signal --add event=window_destroyed action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"
#yabai -m signal --add event=space_changed action="yabai -m window --focus $(yabai -m query --windows --window | jq ".id")"
# yabai -m signal --add event=application_terminated action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse"

#testing signals
# yabai -m signal --add event=window_destroyed action="terminal-notifier -message 'window_destroyed'"
# yabai -m signal --add event=application_terminated action="terminal-notifier -message 'application_terminated'"

## If I close the active window, focus on any other visible window.
#yabai -m signal --add event=window_destroyed action="bash /Users/jesseskelton/CustomScripts/SwitchSpaces/window-focus-on-destroy.sh"
# yabai -m signal --add event=space_changed action="export CUR_ACTIVE_APP=\"iTerm2\""

echo "yabai configuration loaded.."

#END
